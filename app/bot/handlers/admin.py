from aiogram import Router, F
from aiogram.filters import Command, CommandObject, StateFilter
from aiogram.fsm.state import default_state
from aiogram.types import Message
from aiogram_i18n import I18nContext
from aiogram.fsm.context import FSMContext
from app.bot.enums.roles import UserRole
from app.bot.filters.filters import UserRoleFilter
from sqlalchemy.ext.asyncio import AsyncSession
from app.bot.states.states import AddMenuItem
from app.infrastructure.database.crud.user_crud import (
    get_user_by_user_id, get_user_by_username,
)
from app.infrastructure.database.models import MenuItem, Activity
from app.infrastructure.database.crud.admin_crud import (
    add_user_activity, change_user_banned_status_by_id,
    change_user_banned_status_by_username, get_top_users_statistics,
    get_user_banned_status_by_id, get_user_banned_status_by_username
)

from datetime import datetime, timedelta

admin_router = Router()

admin_router.message.filter(UserRoleFilter(UserRole.ADMIN))

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
# –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é `UserRole.ADMIN`
@admin_router.message(Command(commands=["help"]))
async def process_admin_help_command(message: Message, i18n: I18nContext):
    await message.answer(i18n.get("help_admin"))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cansel" –≤ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö,
# –∫—Ä–æ–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@admin_router.message(Command(commands=["cansel"]), ~StateFilter(default_state))
async def process_cansel_command(message: Message, i18n: I18nContext, state: FSMContext):
    await message.answer(i18n.get("cansel_item"))
    await state.clear()

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "add_menu_item"
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∏–∂–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@admin_router.message(Command("add_menu_item"))
async def start_add_menu_item(message: Message, state: FSMContext):
    await state.set_state(AddMenuItem.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã:")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –ø–µ–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ "–ù–∞–∑–≤–∞–Ω–∏–µ" —Ç–æ–≤–∞—Ä–∞
@admin_router.message(StateFilter(AddMenuItem.name), F.text)
async def set_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddMenuItem.description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∏—Ü—Ü—ã:")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –ø–µ–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ "–û–ø–∏—Å–∞–Ω–∏–µ" —Ç–æ–≤–∞—Ä–∞
@admin_router.message(StateFilter(AddMenuItem.description), F.text)
async def set_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddMenuItem.price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–∏—Ü—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.50):")


# –¶–µ–Ω–∞
@admin_router.message(StateFilter(AddMenuItem.price), F.text)
async def set_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
    except ValueError:
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    
    await state.update_data(price=price)
    await state.set_state(AddMenuItem.category)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∏—Ü—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–ª–∞—Å—Å–∏–∫–∞' –∏–ª–∏ '–û—Å—Ç—Ä–∞—è'):")


# –ö–∞—Ç–µ–≥–æ—Ä–∏—è
@admin_router.message(StateFilter(AddMenuItem.category), F.text)
async def set_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await state.set_state(AddMenuItem.photo)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–∏—Ü—Ü—ã (—á–µ—Ä–µ–∑ –≥–∞–ª–µ—Ä–µ—é Telegram):")


# –§–æ—Ç–æ
@admin_router.message(StateFilter(AddMenuItem.photo), F.photo)
async def set_photo(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    data = await state.get_data()

    try:
        text = (
            f"‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n"
            f"üçï –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
            f"üí∞ –¶–µ–Ω–∞: {data['price']}\n"
            f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ '‚úÖ' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '‚ùå' –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        )

        await message.answer_photo(
            photo=data["photo"],
            caption=text
        )

        await state.set_state(AddMenuItem.confirm)

    except KeyError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{e.args[0]}' –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
@admin_router.message(StateFilter(AddMenuItem.confirm), F.text.in_(["‚úÖ", "‚ùå"]))
async def confirm_item(message: Message, state: FSMContext, session: AsyncSession):
    if message.text == "‚ùå":
        await state.clear()
        return await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    data = await state.get_data()

    item = MenuItem(
        name=data["name"],
        description=data["description"],
        price=data["price"],
        category=data["category"],
        photo_id=data["photo"],
    )
    session.add(item)
    await session.commit()
    await state.clear()
    await message.answer("–ü–∏—Ü—Ü–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–µ–Ω—é! üçï")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/statistics"
@admin_router.message(Command("statistics"))
async def show_statistics(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 7, 30 –¥–Ω–µ–π –∏ –≤—Å—ë –≤—Ä–µ–º—è."""
    now = datetime.utcnow()

    periods = {
        "7 –¥–Ω–µ–π": now - timedelta(days=7),
        "30 –¥–Ω–µ–π": now - timedelta(days=30),
        "–≤—Å—ë –≤—Ä–µ–º—è": None,
    }

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

    for label, since in periods.items():
        users = await get_top_users_statistics(session, limit=5, since=since)

        text += f"üî• –¢–æ–ø –∑–∞ {label}:\n"
        if not users:
            text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö üò¢\n\n"
            continue

        for i, (user_id, username, total_actions, last_seen) in enumerate(users, start=1):
            last_seen_str = last_seen.strftime("%Y-%m-%d %H:%M:%S") if last_seen else "‚Äî"
            text += (
                f"{i}. @{username or 'Unknown'} ‚Äî {total_actions} –¥–µ–π—Å—Ç–≤–∏–π "
                f"(–ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_seen_str})\n"
            )

        text += "\n"

    await message.answer(text)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/ban"
# –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_router.message(Command("ban"))
async def process_ban_command(
    message: Message,
    command: CommandObject,
    i18n: I18nContext,
    session: AsyncSession,
):
    args = command.args
    if not args:
        await message.answer(i18n.get("empty_ban_answer"))
        return

    arg_user = args.split()[0].strip()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    if arg_user.isdigit():
        banned_status = await get_user_banned_status_by_id(session, int(arg_user))
    elif arg_user.startswith("@"):
        banned_status = await get_user_banned_status_by_username(session, arg_user[1:])
    else:
        await message.answer(i18n.get("incorrect_ban_arg"))
        return

    if banned_status is None:
        await message.answer(i18n.get("no_user"))
    elif banned_status:
        await message.answer(i18n.get("already_banned"))
    else:
        if arg_user.isdigit():
            await change_user_banned_status_by_id(session, int(arg_user), True)
        else:
            await change_user_banned_status_by_username(session, arg_user[1:], True)
        await message.answer(i18n.get("successfully_banned"))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/unban"
# –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_router.message(Command("unban"))
async def process_unban_command(
    message: Message,
    command: CommandObject,
    i18n: I18nContext,
    session: AsyncSession,
):
    args = command.args
    if not args:
        await message.answer(i18n.get("empty_unban_answer"))
        return

    arg_user = args.split()[0].strip()

    if arg_user.isdigit():
        banned_status = await get_user_banned_status_by_id(session, int(arg_user))
    elif arg_user.startswith("@"):
        banned_status = await get_user_banned_status_by_username(session, arg_user[1:])
    else:
        await message.answer(i18n.get("incorrect_unban_arg"))
        return

    if banned_status is None:
        await message.answer(i18n.get("no_user"))
    elif not banned_status:
        await message.answer(i18n.get("already_unbanned"))
    else:
        if arg_user.isdigit():
            await change_user_banned_status_by_id(session, int(arg_user), False)
        else:
            await change_user_banned_status_by_username(session, arg_user[1:], False)
        await message.answer(i18n.get("successfully_unbanned"))
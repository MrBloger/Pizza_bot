from aiogram import BaseMiddleware
from aiogram.types import Update
from typing import Callable, Awaitable, Any

from sqlalchemy.ext.asyncio import AsyncSession
from app.infrastructure.database.crud.user_crud import get_user_by_user_id


class BanCheckMiddleware(BaseMiddleware):
    """Middleware, –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

    async def __call__(
        self,
        handler: Callable[[Update, dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: dict[str, Any]
    ) -> Any:
        session: AsyncSession = data.get("session")
        user = data.get("event_from_user")

        # –µ—Å–ª–∏ –∞–ø–¥–µ–π—Ç –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä callback –æ—Ç —á–∞—Ç–∞)
        if not user or not session:
            return await handler(event, data)

        db_user = await get_user_by_user_id(session=session, user_id=user.id)
        if db_user and db_user.banned:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if hasattr(event, "message") and event.message:
                    await event.message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
                elif hasattr(event, "callback_query") and event.callback_query:
                    await event.callback_query.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
            except Exception:
                pass

            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É (—Ö—ç–Ω–¥–ª–µ—Ä –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω)

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
        return await handler(event, data)